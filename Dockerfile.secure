# Multi-stage build for security and smaller size
FROM python:3.13-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    libffi-dev \
    openssl-dev \
    sqlite-dev \
    && apk upgrade

WORKDIR /app

# Install uv for faster dependency resolution
RUN pip install --no-cache-dir uv

# Copy requirements and install dependencies
COPY requirements.txt requirements-dev.txt pyproject.toml ./
RUN uv venv /app/.venv && \
    source /app/.venv/bin/activate && \
    uv pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY src/ ./src/
RUN source /app/.venv/bin/activate && \
    uv pip install --no-cache-dir -e .

# Final stage - minimal runtime image
FROM python:3.13-alpine

# Install runtime dependencies only
RUN apk add --no-cache \
    sqlite \
    libffi \
    openssl \
    && apk upgrade \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1000 app && \
    adduser -u 1000 -G app -s /bin/sh -D app

WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder --chown=app:app /app/.venv /app/.venv

# Create data directory
RUN mkdir -p /app/data && chown -R app:app /app

# Switch to non-root user
USER app

# Set PATH to use virtual environment
ENV PATH="/app/.venv/bin:$PATH"

# Expose port (if needed for HTTP mode)
EXPOSE 8000

# Use non-root user and specific entrypoint
ENTRYPOINT ["mcp-server-sqlite"]