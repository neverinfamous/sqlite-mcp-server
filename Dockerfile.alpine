# SQLite MCP Server - Production Docker Image
# Alpine-based for enhanced security and smaller size
FROM python:3.12-alpine

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    build-base \
    linux-headers \
    musl-dev \
    libffi-dev \
    openssl-dev \
    python3-dev \
    sqlite \
    && apk upgrade

# Copy requirements first for better Docker layer caching
COPY requirements.txt .
COPY requirements-dev.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools>=78.1.1
RUN pip install --no-cache-dir -r requirements.txt

# Copy source code and essential files
COPY src/ ./src/
COPY pyproject.toml .
COPY README.md .
COPY LICENSE .

# Install the package in development mode for easier debugging
RUN pip install --no-cache-dir -e .

# Create data directory for SQLite database with proper permissions
RUN mkdir -p /app/data && chmod 755 /app/data

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup && \
    chown -R appuser:appgroup /app

# Set environment variables
ENV PYTHONPATH=/app
ENV DB_PATH=/app/data/database.db

# Expose port (for potential future web interface)
EXPOSE 8000

# Switch to non-root user
USER appuser

# Health check to ensure the server can start
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys; sys.path.append('/app/src'); import mcp_server_sqlite; print('Server healthy')" || exit 1

# Default command - can be overridden
CMD ["mcp-server-sqlite"]

# Labels for Docker Hub
LABEL maintainer="SQLite MCP Server"
LABEL description="A Model Context Protocol server for SQLite with JSONB support and advanced database operations"
LABEL version="1.0.0-alpine"
LABEL org.opencontainers.image.source="https://github.com/neverinfamous/mcp_server_sqlite"