name: Smithery CI/CD

on:
  push:
    branches: [ main, develop, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read

jobs:
  test-http-server:
    name: Test HTTP Server for Smithery
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
    
    - name: Install HTTP server dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp>=3.8.0 aiohttp-cors>=0.7.0 mcp>=1.14.0
        pip install -r requirements.txt || echo "Some optional dependencies failed, continuing..."
    
    - name: Test HTTP server import
      run: |
        cd src
        python -c "
        import server_http
        print('‚úÖ HTTP server imports successfully')
        "
    
    - name: Test HTTP server startup (background)
      run: |
        cd src
        python server_http.py &
        SERVER_PID=$!
        echo "Server PID: $SERVER_PID"
        
        # Wait for server to start
        sleep 5
        
        # Test health endpoint
        curl -f http://localhost:8000/health || (echo "Health check failed" && kill $SERVER_PID && exit 1)
        
        # Test MCP endpoint
        curl -f http://localhost:8000/mcp || (echo "MCP endpoint failed" && kill $SERVER_PID && exit 1)
        
        # Clean up
        kill $SERVER_PID
        echo "‚úÖ HTTP server tests passed"

  test-smithery-container:
    name: Test Smithery Docker Container
    runs-on: ubuntu-latest
    needs: test-http-server
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Smithery Docker Image
      run: |
        docker build -f Dockerfile.smithery -t sqlite-mcp-server:smithery-test .
    
    - name: Test Smithery Container Health
      run: |
        # Start container in background
        docker run -d --name smithery-test -p 8080:8000 sqlite-mcp-server:smithery-test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || (echo "Container health check failed" && docker logs smithery-test && exit 1)
        
        # Test MCP endpoint
        curl -f http://localhost:8080/mcp || (echo "Container MCP endpoint failed" && docker logs smithery-test && exit 1)
        
        # Clean up
        docker stop smithery-test
        docker rm smithery-test
        echo "‚úÖ Smithery container tests passed"
    
    - name: Test Smithery Configuration
      run: |
        # Validate smithery.yaml syntax
        python -c "
        import yaml
        with open('smithery.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        # Validate required fields
        assert config['runtime'] == 'container', 'Runtime must be container'
        assert 'startCommand' in config, 'startCommand is required'
        assert config['startCommand']['type'] == 'http', 'startCommand type must be http'
        assert 'build' in config, 'build configuration is required'
        assert config['build']['dockerfile'] == 'Dockerfile.smithery', 'Dockerfile path is incorrect'
        
        print('‚úÖ smithery.yaml configuration is valid')
        "
    
    - name: Run Smithery Test Suite
      run: |
        # Install test dependencies
        pip install aiohttp aiohttp-cors
        
        # Start server in background for testing
        cd src
        python server_http.py &
        SERVER_PID=$!
        
        # Wait for server
        sleep 5
        
        # Run test suite
        cd ..
        python test_smithery.py || (kill $SERVER_PID && exit 1)
        
        # Clean up
        kill $SERVER_PID
        echo "‚úÖ Smithery test suite passed"

  validate-smithery-config:
    name: Validate Smithery Configuration
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
    
    - name: Install PyYAML
      run: pip install PyYAML
    
    - name: Validate smithery.yaml
      run: |
        python -c "
        import yaml
        import json
        
        # Load and validate smithery.yaml
        with open('smithery.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        print('üìã Smithery Configuration:')
        print(json.dumps(config, indent=2))
        
        # Validate required fields for Smithery
        required_fields = ['name', 'description', 'version', 'runtime']
        for field in required_fields:
            assert field in config, f'Missing required field: {field}'
        
        # Validate container runtime configuration
        if config['runtime'] == 'container':
            assert 'startCommand' in config, 'Container runtime requires startCommand'
            assert 'build' in config, 'Container runtime requires build configuration'
            
            start_cmd = config['startCommand']
            assert start_cmd['type'] == 'http', 'startCommand type must be http for MCP servers'
            
            if 'configSchema' in start_cmd:
                schema = start_cmd['configSchema']
                assert schema['type'] == 'object', 'configSchema must be an object'
                print('‚úÖ Configuration schema is valid')
        
        print('‚úÖ smithery.yaml passes all validation checks')
        "
    
    - name: Check Dockerfile.smithery
      run: |
        if [ ! -f "Dockerfile.smithery" ]; then
          echo "‚ùå Dockerfile.smithery not found"
          exit 1
        fi
        
        # Basic Dockerfile validation
        grep -q "FROM python:" Dockerfile.smithery || (echo "‚ùå Must use Python base image" && exit 1)
        grep -q "EXPOSE" Dockerfile.smithery || (echo "‚ùå Must expose a port" && exit 1)
        grep -q "CMD" Dockerfile.smithery || (echo "‚ùå Must have CMD instruction" && exit 1)
        
        echo "‚úÖ Dockerfile.smithery passes basic validation"

  smithery-deployment-ready:
    name: Smithery Deployment Ready
    runs-on: ubuntu-latest
    needs: [test-http-server, test-smithery-container, validate-smithery-config]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Smithery Deployment Summary
      run: |
        echo "üöÄ SQLite MCP Server is ready for Smithery deployment!"
        echo ""
        echo "üìã Deployment Checklist:"
        echo "‚úÖ HTTP server implementation complete"
        echo "‚úÖ Docker container builds successfully"
        echo "‚úÖ smithery.yaml configuration validated"
        echo "‚úÖ Health and MCP endpoints working"
        echo "‚úÖ Test suite passes"
        echo ""
        echo "üîó Next Steps:"
        echo "1. Connect your GitHub repository to Smithery"
        echo "2. Navigate to the Deployments tab"
        echo "3. Click Deploy to build and host your server"
        echo ""
        echo "üìç Your server will be available at:"
        echo "https://server.smithery.ai/your-server/mcp"
        echo ""
        echo "üéØ Features enabled:"
        echo "- SQLite database operations (67+ tools)"
        echo "- JSONB binary storage support"
        echo "- Statistical analysis library"
        echo "- Advanced text processing"
        echo "- Full-text search (FTS5)"
        echo "- Semantic search capabilities"
        echo "- SpatiaLite geospatial analytics"
        echo "- Business intelligence tools"
